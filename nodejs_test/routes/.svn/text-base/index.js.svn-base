
/*
 * GET home page.
 */
var fs=require('fs');
var mysql=require('mysql');
var exec=require('child_process').exec;
var conn=mysql.createConnection({
    host:'localhost',
    user:'root',
    password:'',
    database:'cluster_manager_dev',
    port:3306
});

exports.authorize=function(req,res,next){
    console.log('check the username info ');
	console.log(req.session.username);
    if(!req.session.username){
        res.redirect('/login');
    }
    else{
        next();
    }
}
exports.index = function(req, res){
	res.render('index', { title: 'Express' });
};
exports.index = function(req,res){
    res.render('index',{title: 'Index'});
}
exports.login = function(req,res){
    console.log("open the login page");
    res.render('login',{title: 'user login'});
}
exports.monitor = function (req, res) {
    console.log("open monitor page");
    res.render('monitor', {title : 'Cluster Monitor'});
}
exports.doLogin = function(req,res){
    var user={
        username:'admin',
        password:'admin'
    }
    console.log("hello");
    console.log(req.body);
    if(req.body.username===user.username && req.body.password===user.password){
    console.log("world");
    req.session.username=user.username;
        res.redirect('/server'); 
    }
    else{
    console.log("jkjal");
    res.redirect('/login');
    }
}
exports.dologout=function(req,res){
    if(req.session.username)
    req.session.username=null;
    res.redirect('/login');
}
exports.home=function(req,res){
    var user={
        username:'admin',
        password:'admin'
    }
    res.render('home',{title:'Home',user:user});
}

exports.server_info_update=function(req,res){
    conn.query("select host,ip,cpu,ram,disk,os,load_info,status from host_info",function(err,result){
            if(err){
                console.log(err);
                res.send('500',{error:"get servers info from db failed"});
            }
            else{
                if(result.length == 0){
                    res.send('200',{result:""});
                }
                var count=0;
                for(var i=0;i<result.length;i++){
                    if(result[i]['host'] == ''){
//                        console.log(result[i]);
                        continue;
                    }
 //                   console.log(result[i]['host']);
                    conn.query("select host,role_name from services_on_the_hosts_info where host='"+result[i]['host']+"'",function(host_number,total_info){
                        return function(err,result){
                            count++;
                            if(err){
                                console.log(err);
                            }
                            else{
                                console.log(result); 
                                console.log(typeof result);
                                if(result.length == 0)
                                    total_info[host_number]['role_name']='';
                                else
                                    total_info[host_number]['role_name']=result[0]['role_name'];
                                for(var j=1;j<result.length;j++){
                                    total_info[host_number]['role_name']=total_info[host_number]['role_name']+','+result[j]['role_name'];
                                }
                                console.log(total_info[host_number]);
                                if(count ==total_info.length){
                                    var str_result=JSON.stringify(total_info);
                                    var str_result1=str_result.replace(/"/g,'\"');
                                    res.send("200",{result:str_result1});
                                }
                            }
                        };
                    }(i,result) );
                }

            }
    });
}

exports.server=function(req,res){
    console.log(req.session.username);
    conn.query("select host,ip,cpu,ram,disk,os,load_info,status from host_info",function(err,result){
            if(err){
                console.log(err);
                res.render('server',{title:'Server:Add New Server',flag:'true',CheckRes:'database option failed',DataBase_Res:'',host_arg:''});
            }
            else{
        if(result.length == 0){
            res.render('server',{title:'Server',flag:'false',CheckRes:'',DataBase_Res:'',host_arg:''});
        }
                var count=0;
                for(var i=0;i<result.length;i++){
                    if(result[i]['host'] == ''){
//                        console.log(result[i]);
                        continue;
                    }
 //                   console.log(result[i]['host']);
                    conn.query("select host,role_name from services_on_the_hosts_info where host='"+result[i]['host']+"'",function(host_number,total_info){
                        return function(err,result){
                            count++;
                            if(err){
                                console.log(err);
                            }
                            else{
                                console.log(result); 
                                console.log(typeof result);
                                if(result.length == 0)
                                    total_info[host_number]['role_name']='';
                                else
                                    total_info[host_number]['role_name']=result[0]['role_name'];
                                for(var j=1;j<result.length;j++){
                                    total_info[host_number]['role_name']=total_info[host_number]['role_name']+','+result[j]['role_name'];
                                }
                                console.log(total_info[host_number]);
                                if(count ==total_info.length){
                                    var str_result=JSON.stringify(total_info);
                                    var str_result1=str_result.replace(/"/g,'\"');
                                    res.render('server',{title:'Server',flag:'false',CheckRes:'',DataBase_Res:str_result1,host_arg:''});

                                }
                            }
                        };
                    }(i,result) );
                }

            }
    });
}

exports.add_server_first=function(req,res){
    var host=req.body.machine_host;
    var port=req.body.machine_port;
    var file=req.body.keyfile;
    console.log(req.body);
    console.log(JSON.stringify(req.body));
    req.session.machine_host=host;
    req.session.machine_port=port;
//    console.log(req.files.files[0]);
    if(host == null || port == null){
        console.log("hello world");
        res.render('server',{title:'Service:Add New Server',flag:'true',CheckRes:'the input info is illegal',DataBase_Res:''});
    }
    else{
        var current_path=process.cwd();
        var new_path=current_path+'/keyfile_dir/'+host+'.keyfile.list';
        console.log(new_path);
//        console.log(file);
        fs.renameSync(req.files.keyfile.path,new_path);
        fs.chmodSync(new_path,'600');
        console.log("the machine host and port is "+host+":"+port);
       //here is the code which check the host is illegal or not. 
        var api_checkhost_cmd='ping -c 5 '+host;
        exec(api_checkhost_cmd,function(err,stdout,stderr){
                if(err == null){
                    // get the base info of the host from yanqiang's api name:host -a:add server;-g get info.
                    var ipStr = stdout;
                    var ipStartPos = ipStr.indexOf('(');
                    var ipEndPos = ipStr.indexOf(')');
                    ipStr = ipStr.substring(ipStartPos+1,ipEndPos);
                    console.log(api_checkhost_cmd+' success');
                    var api_gethostinfo_cmd='sh HOST -g '+host+' -p '+port+' -k '+new_path;
                    exec(api_gethostinfo_cmd,function(err,stdout,stderr){
                        console.log(api_gethostinfo_cmd);
                        if(err){
                console.log('api_gethostinfo_cmd failed');
                console.log(err);
                            res.render('server',{title:'Server:Add new server',flag:'true',CheckRes:'get the host info error:'+stdout+'.please cancle the operation',DataBase_Res:'',host_arg:''}); 
                        }
                        else{
                            console.log(api_gethostinfo_cmd+' success');
                            var host_info_res=stdout;
                            var arr_host_info_res=new Array();
                            arr_host_info_res=host_info_res.split(";");
                            var list_host_info_res=[];
                            for(var m=0;m<arr_host_info_res.length;m++){
                                var temp_arr=new Array();
                                temp_arr=(arr_host_info_res[m]).split(":");
                                if(temp_arr[1].indexOf('\n') != -1)
                                    temp_arr[1]=temp_arr[1].substr(0,temp_arr[1].indexOf('\n'));
                                list_host_info_res[temp_arr[0]]=temp_arr[1];
                                console.log(temp_arr[0]);
                            }
                            //here process the api result
//                            conn.query("delete from host_info_temp where host=?;insert into host_info_temp set host=?,ip=?,cpu=?,ram=?,disk=?,os=?,load_info=?",[host,host,list_host_info_res['ip'],list_host_info_res['cpu'],list_host_info_res['ram'],list_host_info_res['disk'],list_host_info_res['os'],list_host_info_res['load_info']],function(err,result){
                            conn.query("delete from host_info_temp where host=?",[host],function(err,result){
                if(err){

                }
                else{
                    conn.query("insert into host_info_temp set host=?,ip=?,cpu=?,ram=?,disk=?,os=?,load_info=?,key_file_path=?,port=?,status=?",[host,ipStr,list_host_info_res['cpu'],list_host_info_res['ram'],list_host_info_res['disk'],list_host_info_res['os'],list_host_info_res['load'],new_path,port,'live'],function(err,result){
                    if(err){
                        console.log('the err is \n');
                        console.log( err);
                        res.render('server',{title:'Service:Add New Server',flag:'true',CheckRes:'update the database failed',DataBase_Res:'',host_arg:''});
                    }
                    else{
                        
                        res.render('server',{title:'Service:Add New Server',flag:'true',CheckRes:'the host is legal,please go on to add the server to the cluser',DataBase_Res:'',host_arg:host});
                    //call the api from xiaoqiang to install the nagios and other base service
                    }
                    }); 

                }
                });
                        } 
                    });
                }
                else{
            console.log(err);
                    res.render('server',{title:"Server:Add New Server",flag:'true',CheckRes:'the input info for the host is illegal,the check err is '+JSON.stringify(err)+stdout+'. please check the host info,then try again',DataBase_Res:'',host_arg:''});
                }               
        });
    }
}

//function install_base_service(arg1,arg2,callback)
exports.add_server_second=function(req,res){
//    var host=req.body.machine_host1;
//    var port=req.body.machine_port1;
    var host=req.session.machine_host;
    var port=req.session.machine_port;
    var but_value=req.body.SecondNext;

    if(but_value=="true"){
        //call the api from xiaoqiang to install the nagios and other base service        
        var current_path=process.cwd();
        var new_path=current_path+'/keyfile_dir/'+host+'.keyfile.list';
        var api_addhost_cmd='sh HOST -a '+host+' -p '+port+' -k '+new_path;
    console.log(api_addhost_cmd);
        exec(api_addhost_cmd,function(err,stdout,stderr){
            if(err){
        console.log('api_addhost_cmd failed');
        console.log(err);
        console.log(stdout);
                res.render('server',{title:'Server:Add New Server',flag:'true',CheckRes:'add host failed,the error info is '+JSON.stringify(err)+stdout,DataBase_Res:'',host_arg:''});
            }
            else{
        console.log(api_addhost_cmd+' success');
//                var result=stdout;
 //               var arr_info=result.split(";");
                conn.query("insert into host_info select * from host_info_temp where host=?",[host],function(err,result){
            if(err){
                console.log("insert host_info from host_info_temp failed");
                console.log(err);
                res.render('server',{title:'Server:Add New Server',flag:'true',CheckRes:'add host failed,the error info is '+JSON.stringify(err),DataBase_Res:'',host_arg:''});
            }
            else{
                conn.query("delete from host_info_temp where host=?",[host],function(err,result){
                     if(err){
                     res.render('server',{title:'Server:Add New Server',flag:'true',CheckRes:'add host failed,the error info is '+JSON.stringify(err)+stdout,DataBase_Res:'',host_arg:''});
                     }
                     else{
                     conn.query("select host,ip,cpu,ram,disk,os,load_info,status from host_info",function(err,result){
                        if(err){
                        console.log(err);
                        res.render('server',{title:'Server:Add New Server',flag:'true',CheckRes:'database option failed',DataBase_Res:'',host_arg:''});
                        }
                        else{
                        var count=0;
                        for(var i=0;i<result.length;i++){
                            if(result[i]['host'] == ''){
                            console.log(result[i]);
                            continue;
                            }
                            console.log(result[i]['host']);
                            conn.query("select host,role_name from services_on_the_hosts_info where host=?",[result[i]['host']],function(host_number,total_info){
                            return function(err,result){
                                count++;
                                if(err){
                                console.log(err);
                                }
                                else{
                                console.log(result); 
                                console.log(typeof result);
                                if(result.length == 0)
                                    total_info[host_number]['role_name']='';
                                else
                                    total_info[host_number]['role_name']=result[0]['role_name'];
                                for(var j=1;j<result.length;j++){
                                    total_info[host_number]['role_name']=total_info[host_number]['role_name']+','+result[j]['role_name'];
                                }
                                console.log(total_info[host_number]);
                                if(count ==total_info.length){
                                    var str_result=JSON.stringify(total_info);
                                    var str_result1=str_result.replace(/"/g,'\"');
                                    console.log(str_result1);
                                    res.render('server',{title:'Server',flag:'false',CheckRes:'',DataBase_Res:str_result1,host_arg:''});

                                }
                               }
                            };
                            }(i,result) );
                        }
                       
                        }
                    });                   
                    }
                });
            }
        });


            } 
        });
    }
}
exports.show_server_list=function(req,res){

}
exports.update_remove_server=function(req,res){
    conn.query("select host,ip from host_info",function(err,result){
            console.log(result);
            if(err){
                console.log(err);
                res.send('500',{error:"get servers info from db failed"});
            }
            else{
                if(result.length == 0){
                    res.send('200',{result:""});
                }
                var count=0;
                for(var i=0;i<result.length;i++){
                    if(result[i]['host'] == ''){
                        continue;
                    }
                    conn.query("select host,role_name from services_on_the_hosts_info where host='"+result[i]['host']+"'",function(host_number,total_info){
                        return function(err,result){
                            count++;
                            if(err){
                                console.log(err);
                            }
                            else{
                                console.log(result); 
                                console.log(typeof result);
                                if(result.length == 0)
                                    total_info[host_number]['role_name']='';
                                else
                                    total_info[host_number]['role_name']=result[0]['role_name'];
                                for(var j=1;j<result.length;j++){
                                    total_info[host_number]['role_name']=total_info[host_number]['role_name']+','+result[j]['role_name'];
                                }
                                console.log(total_info[host_number]);
                                if(count ==total_info.length){
                                    var str_result=JSON.stringify(total_info);
                                    var str_result1=str_result.replace(/"/g,'\"');
                                    console.log(str_result1);
                                    res.send("200",{result:str_result1});
                                }
                            }
                        };
                    }(i,result) );
                }
            }
    });
}
var role_count_on_the_host=0;
var removed_role_count_on_the_host=0;
var removed_role_failed_result=[];
exports.remove_server=function(req,res){
    var host=req.body.removed_host;    
    console.log("the removed host is ");
    console.log(host);
    var sql_cmd='select role_name from services_on_the_hosts_info where host=? and service_status=?';
    conn.query(sql_cmd,[host,'health'],function(err,result){
        console.log(result);
        if(err){
            console.log(err);
        }
        else{
            if(result.length != 0){
                res.send(200,{error_info:'please stop the services on the host firstly'});
            }    
            else{
                conn.query('select role_name,service_name from services_on_the_hosts_info where host=? and service_status=?',[host,'dead'],function(err,result1){
                    console.log(result1);
                    if(err){
                        console.log(err);
                    }
                    else{
                        if(result1.length == 0){
                            conn.query('delete from host_info where host =?',[host],function(err,result){
                                if(err){
                                    console.log(err);
                                    res.send(200,{error_info:'remove failed'});
                                }
                                else{
                                    res.send(200,{result:'success'});
                                }
                            });
                        }
                        else{
                            role_count_on_the_host=result1.length;
                            for(var i=0;i<result1.length;i++){
                                remove_one_role_on_the_host(result1[i].role_name,host,result1[i].service_name,res,req);    
                            }
                        } 
                    }
                });
            }
        }
    });

}
function remove_one_role_on_the_host(role,host,service,res,req){
    var remove_role_cmd='sh /usr/local/NArk/uppershell/bin/DPOP '+host+' hadoop '+role+' uninstall';
    var remove_check_cmd='sh /usr/local/NArk/bin/CHECK -h '+host+' -p hadoop';
    var makeConfigFileCmd='';
//    var config_cmd='sh /usr/local/NArk/uppershell/bin/DPOP '+host+' hadoop '+role+' config';
//    var config_check_cmd='sh /usr/local/NArk/bin/CHECK -h '+host+' -p hadoop -c config';
    exec(remove_role_cmd,function(err,stdout,stderr){
        console.log(remove_role_cmd);
        setTimeout(function(){
            exec(remove_check_cmd,function(err,stdout,stderr){
                console.log(remove_check_cmd);
                if(err){
                //    console.log(err);
                    conn.query('delete from services_on_the_hosts_info where host=? and role_name=?',[host,role],function(err,result){
                        update_service_config_file(makeConfigFileCmd,service,function(){
                                exec(makeConfigFileCmd,function(err,stdout,stderr){
                                        console.log(makeConfigFileCmd);
                                        if(err){
                                            console.log(err);
                                        }
                                        else{
                                            conn.query('select host,role_name from services_on_the_hosts_info where service_name=?',[service],function(err,result){
                                                if(err){
                                                    console.log(err);
                                                }
                                                else{
                                                    var other_host_role_count=result.length;
                                                    var process_other_host_role_count=0;
                                                    for(var i=0;i<result.length;i++){
                                                        var config_cmd='sh /usr/local/NArk/uppershell/bin/DPOP '+result[i].host+' hadoop '+result[i].role_name+' config';
                                                        exec(config_cmd,function (host,role_name){
                                                            return function(err,stdout,stderr){
                                                        
                                                                var config_check_cmd='sh /usr/local/NArk/bin/CHECK -h '+host+' -p hadoop -c config';
                                                                console.log(config_cmd);
                                                                setTimeout(function(){
                                                                    exec(config_check_cmd,function(err,stdout,stderr){
                                                                        console.log(config_check_cmd);
                                                                        if(err){
                                                                            console.log(err);
                                                                        }    
                                                                        else{
                                                                            process_other_host_role_count++;
                                                                            console.log('role_count_on_the_host is ');
                                                                            console.log(role_count_on_the_host);
                                                                            console.log('removed_role_count_on_the_host is ');
                                                                            console.log(removed_role_count_on_the_host);
                                                                            if(process_other_host_role_count == other_host_role_count)
                                                                                removed_role_count_on_the_host++;
                                                                            if(removed_role_count_on_the_host == role_count_on_the_host){
                                                                                conn.query('select role_name from services_on_the_hosts_info where host=?',[host],function(err,result){
                                                                                    if(err){
                                                                                        console.log(err);
                                                                                    }
                                                                                    else{
                                                                                        if(result.length == 0){
                                                                                            conn.query('delete from host_info where host=?',[host],function(err,result){
                                                                                                if(err){
                                                                                                    console.log(err);
                                                                                                }
                                                                                                else{
                                                                                                    res.send(200,{result:'remove host success'});
                                                                                                }
                                                                                            });
                                                                                        }
                                                                                        else{
                                                                                            for(var j=0;j<result.length;j++){
                                                                                                removed_role_failed_result+=result[j].role_name+':';    
                                                                                            }    
                                                                                            removed_role_failed_result=removed_role_failed_result.substring(0,removed_role_failed_result.length);
                                                                                            res.send(200,{error_info:removed_role_failed_result});
                                                                                        }
                                                                                    }
                                                                                });
                                                                            }
                                                                        }
                                                                    });
                                                                },20*1000);
                                                            };
                                                        }(result[i].host,result[i].role_name));
                                                    } 
                                                }

                                            }); 

                                        }
                                });
                        });
                    });
                }
                else{
                    console.log("uninstall failed");
                }
            });
        },20*1000);    
    });
}
function update_service_config_file(makeConfigFileCmd_temp,service,callback){
    conn.query('select role_name,host from services_on_the_hosts_info where service_name=?',[service],function(err,result){
        if(err){
            console.log(err);
            return;
        }
        else{
            var host_role_name_result=result;
            conn.query('select current_config from services_on_running where service_name=?',[service],function(err,result1){
                if(err){
                    console.log(err);
                    return;
                }
                else{
                        var config=result1[0].current_config;
                        var makeConfigFileCmd_temp='sh /usr/local/NArk/sbin/hadoop/generate.sh '+service+' ';
                        if(service == 'hdfs'){
                                for(var i=0;i<host_role_name_result.length;i++){
                                        if(host_role_name_result[i].role_name == 'namenode'){
                                                makeConfigFileCmd_temp+=host_role_name_result[i].host+' ';  
                                                break;
                                        }
                                }
                                for(var i=0;i<host_role_name_result.length;i++){
                                        if(host_role_name_result[i].role_name == 'secondarynamenode'){
                                                makeConfigFileCmd_temp+=host_role_name_result[i].host+' '; 
                                                break;
                                        } 
                                }
                                var datanode_list='';
                                for(var i=0;i<host_role_name_result.length;i++){
                                        if(host_role_name_result[i].role_name == 'datanode'){
                                                datanode_list+=host_role_name_result[i].host+":"; 
                                        }
                                }
                                datanode_list=datanode_list.substring(0,datanode_list.length);
                                makeConfigFileCmd_temp+=datanode_list;
                                //get nn_dir
                                var nn_dir_start=config.indexOf("namenode-directories");
                                nn_dir_start=config.indexOf("^",nn_dir_start);
                                var nn_dir_end=config.indexOf(",",nn_dir_start);
                                var nn_dir=config.substring(nn_dir_start+1,nn_dir_end);
                                makeConfigFileCmd_temp+=nn_dir+' ';
                                //get snn_dir
                                var snn_dir_start=config.indexOf("secondarynamenode-directories");
                                snn_dir_start=config.indexOf("^",snn_dir_start);
                                var snn_dir_end=config.indexOf(",",snn_dir_start);
                                var snn_dir=config.substring(snn_dir_start+1,snn_dir_end);
                                makeConfigFileCmd_temp+=snn_dir+' ';
                                //get dn_dir
                                var dn_dir_start=config.indexOf("datanode-directories");
                                dn_dir_start=config.indexOf("^",dn_dir_start);
                                var dn_dir_end=config.indexOf(",",dn_dir_start);
                                var dn_dir=config.substring(dn_dir_start+1,dn_dir_end);
                                makeConfigFileCmd_temp+=dn_dir;
                                //not finished
                        }
                        else if(service == 'mapreduce'){
                                for(var i=0;i<result.length;i++){
                                        if(result[i].role_name == 'jobtracker'){
                                                makeConfigFileCmd_temp+=result[i].host; 
                                                break;
                                        } 
                                }
                        }
                        console.log('makeConfigFileCmd_temp is '+makeConfigFileCmd_temp);
                        callback();
//                        return makeConfigFileCmd_temp;
                }
            
            });
        }

    });
}

